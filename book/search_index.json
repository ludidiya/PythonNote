[
["PythonObjectAndModuel.html", "Chapter 5 面向对象与模块 5.1 面向过程和面向对象 5.2 类和对象 5.3 继承 5.4 重写和多态 5.5 模块 5.6 常见模块", " Chapter 5 面向对象与模块 面向对象的三大特征：封装、继承、多态 5.1 面向过程和面向对象 面向对象和面向过程都是开发程序的模式： 面向过程：一系列函数按照某个过程顺次被调用，如：摘菜——洗菜——准备佐料——炒菜——出菜 面向对象：找一个功能对象来完成整个过程，如：找个厨师能做上面所有事。面向对象的三大特征：封装、继承、多态。 5.2 类和对象 面向对象编程，是一种通过对象的方式，把现实世界映射到计算机模型的一种编程方法。 现实世界中，我们定义了“人”这种抽象概念，而具体的人则是“小明”、“小红”、“小军”等一个个具体的人。所以，“人”可以定义为一个类（class），而具体的人则是实例（instance）。 5.2.1 定义类和创建对象 说明： 定义类：class 类名() object是Python里所有类的最顶级父类 类名的命名规则按照“大驼峰命名法” eat, run分别是实例的方法，第一个蚕食一般是self，表示实例对象本身，当然也可以将self换成其他的名字，其作用是一个变量，这个变量指向了实例对象。 python中，可以根据已经定义的类去穿件出一个或多个对象。 # 定义类 class Teacher(object): #定义类的功能/方法: 函数放在类里面以此来定义类的功能 #方法1 def eat(self): print(&#39;eat&#39;) #方法2 def run(self): print(&#39;run&#39;) # 根据类创建对象 t = Teacher() # 用对象调用方法 # .表示选择属性或方法 t.eat() # 给对象添加属性 t.name = &#39;XiaoMing&#39; t.age = 18 # 调用属性 print(t.name, t.age) 5.2.2 添加和获取对象的属性 class Hero(object): &quot;&quot;&quot;定义了一个Hero类，可以移动和攻击&quot;&quot;&quot; def move(self): &quot;&quot;&quot;实例方法&quot;&quot;&quot; print(&quot;正在前往事发地点...&quot;) # 实例化一个英雄对象 hero = Hero() # 给对象添加属性，以及对应的属性值 hero.name = &quot;德玛西亚&quot; # 名字 hero.hp = 2600 # 生命值 # 通过运算符，获取对象的属性 print(&quot;英雄 %s 的生命值：%d&quot; % (hero.name, hero.hp)) 5.2.3 通过self获取对象属性 class Hero(object): &quot;&quot;&quot;定义了一个Hero类，可以移动和攻击&quot;&quot;&quot; def move(self): &quot;&quot;&quot;实例方法&quot;&quot;&quot; print(&quot;正在前往事发地点...&quot;) def info(self): &quot;&quot;&quot;在类的实例方法中，通过self获取该对象的属性&quot;&quot;&quot; print(&quot;英雄%的生命值：%d&quot; % (self.name, self.hp)) # 实例化一个对象 hero = Hero() # 给对象添加属性，以及对应的属性值 hero.name = &quot;德玛西亚&quot; # 名字 hero.hp = 2600 # 生命值 # 通过.调用类中定义的方法 hero.info() hero.move() 5.2.4 初始化方法__init__() 魔法方法： 在python中，有一些内置好的特定的方法，这些方法在进行特定的操作时会自动被调用，称之为魔法方法__init__()。 如果类里面没有写__init__()方法，Python会自动创建，但是不执行任何操作 如果为了能够完成自己想的功能，可以自己定义__init__()方法 所以一个类里面无论自己是否编写__init__()，都一定有__init__()方法 class Hero(object): def __init__(self): &quot;&quot;&quot;方法，用来做变量初始化、赋值操作，在类实例化对象的时候，会被自动调用&quot;&quot;&quot; self.name = &quot;hero&quot; # 名字 self.hp = 2600 # 生命值 def move(self): &quot;&quot;&quot;实例方法&quot;&quot;&quot; print(&quot;正在前往事发地点...&quot;) # 实例化一个对象，并自动调用了__init__()方法 hero = Hero() # 通过.调用实例方法 hero.name hero.hp hero.move() 总结： __init__()方法，在创建一个对象时默认被调用，不需要手动调用 __init__(self)方法中的self参数，不需要开发者传递，Python解释器会自动把当前的对象引用传递过去。 5.2.5 有参数的init方法 class Hero(object): def __init__(self, name, hp): &quot;&quot;&quot;方法，用来做变量初始化、赋值操作，在类实例化对象的时候，会被自动调用&quot;&quot;&quot; # 名字 self.name = name # 生命值 self.hp = hp def move(self): &quot;&quot;&quot;实例方法&quot;&quot;&quot; print(&quot;正在前往事发地点...&quot;) def info(self): print(&quot;应用%s的生命值：%d&quot; % (self.name, self.hp)) # 实例化一个对象，参数会传递到对象的__init__()方法 luban = Hero(&quot;鲁班&quot;, 2600) yase = Hero(&quot;亚瑟&quot;,3000) # 不同对象的属性值单独保存 print(id(luban.name)) # 4453209840 print(id(yase.name)) # 4453210032 # 同一类的不同对象，实例方法共享 print(id(luban.move())) #正在前往事发地点... #4386965608 print(id(yase.move())) #正在前往事发地点... #4386965608 5.2.6 私有属性和私有方法 创建的对象不能更改/调用类里面定义的私有属性和私有方法。子类不能继承父类的私有属性和方法。 class Teacher(object): # 初始化方法 def __init__(self,name): # 定义属性 self.name = name # 私有属性,外界不能直接访问 self.__age = 18 # 保留一个实例方法，允许外界更改age def set_age(self,new_age): if new_age &lt; 0: self.__age = 0 else: self.__age = new_age def get_age(self): return self.__age # 实例化一个对象 t = Teacher(&#39;panda&#39;) t.set_age(10) t.get_age() 5.3 继承 在程序中，继承描述的是多个类之间的所说关系 如果一个类A里面的属性和方法可以复用，则可以通过继承的方法，传递到类B里 那么类A就是基类，也叫做父类；B就是派生类，也叫做子类 5.3.1 单继承 单继承：子类只继承一个父类 子类继承父类可以使用父类的方法和属性 继承的好处：子类可以复用父类的代码，可以减少代码量 # 定义一个Person类 class Person(object): def __init__(self); # 属性 self.name = &quot;女娲&quot; # 实例方法 def make_person(self): print(&quot;&lt;%s&gt;造了一个人...&quot;%self.name) # 定义Teacher类，继承了Person，则Teacher是子类，Person是父类 class Teacher(Person): # 子类可继承父类所有的属性和方法，哪怕子类没有自己的属性和方法，也可以使用父类的方法 pass lili = Teacher() # 创建子类实例对象 print(lili.name) # 子类对象可以直接使用父类的属性 lili.make_person() # 子类对象可以直接使用父类的方法 5.3.2 多继承 继承多个父类，继承链的顺序遵守mro规则 class A(object): def show(self): print(&quot;我是A类&quot;) class B(object): def show_info(self): print(&quot;我是B类&quot;) def show(self): print(&quot;我是B类&quot;) class C(A,B): pass C().show_info() C().show() # 我是B类 # 我是A类 print(C.mro()) # mro继承链规则 # [&lt;class &#39;__main__.C&#39;&gt;, &lt;class &#39;__main__.A&#39;&gt;, &lt;class &#39;__main__.B&#39;&gt;, &lt;class &#39;object&#39;&gt;] 5.4 重写和多态 多态只是调用方法的技巧，不会影响到类的内部设计。 5.4.1 重写 重写：子类继承父类，父类的方法满足不了子类的需要可以对父类的方法进行重写 重写的特点: 1. 继承关系， 2. 方法名相同 class Teacher(object): # 初始化方法 def __init__(self): pass def show(self): print(&#39;Teacher show&#39;) class MathTeacher(Teacher): def show(self): print(1) print(&#39;Teacher show&#39;) print(2) MathTeacher().show() # 1 # Teacher show # 2 5.4.2 多态 多态: 不同的子类对象调用相同的父类方法，产生不同的执行结果，可以增加代码的外部调用灵活 多态以继承和重写父类方法为前提 多态是调用方法的技巧，不会影响到类的内部设计 class Teacher(object): def run(self): print(&#39;Teacher is running...&#39;) class Animal(object): def run(self): print(&#39;Animal is running...&#39;) class Dog(Animal): def run(self): print(&#39;Dog is running...&#39;) class Cat(Animal): def run(self): print(&#39;Cat is running...&#39;) # 实例化对象 dog = Dog() cat = Cat() t = Teacher() # 定义一个方法,动物跑 def run_twice(animal): # isinstance用于判断参数是否是某个指定的类 if isinstance(animal,Animal): animal.run() # dog.run() run_twice(dog) run_twice(cat) run_twice(t) # Dog is running... # Cat is running... 5.5 模块 模块：通俗理解一个.py文件就是一个模块，模块是管理功能代码的 模块里面可以定义类，定义函数，定义全局变量，执行对应的功能代码操作 .py文件和.ipynb文件： .py文件是标准的Python源代码文件，通常情况下，使用.py的python源代码文件 ipynb文件是使用 Jupyter Notebook 来编写Python程序时的文件。Jupyter Notebook（此前被称为 IPython notebook）是一个交互式笔记本 5.5.1 自定义模块及导入 自定义模块名字与变量名的定义很类似，都是由字母、数字、下划线组成，但是不能以数字开头，否则无法导入该模块。 如何自己写一个.py文件，并在jupyter里面运行？ py文件：py代码内容如下，并保存到文件first_module.py g_num =100 def show(): print(&#39;我是show方法&#39;) class Student(object): def func(self): print(&#39;func&#39;) print(&quot;first_module&quot;) show() jupyter加载/运行py文件： 加载：%load加载后，first_module.py中所有的代码都将被加载到jupyter的一个代码框中。 %load first_module.py 运行： %run first_module.py # first_module 5.5.2 模块导入注意点 在jupyter中一行一行运行以下代码，观察输出结果 import first_module # first_module # 我是show方法 first_module.show() # 我是show方法 first_module.g_num # 100 first_module.Student().func() # func 发现import first_module时也会有输出结果，这是因为大部分开发者在写模块的时候，都会自己测试一下模块，所以py文件内部有很多需要执行的代码。如果在import阶段需要执行的代码耗时过长，这显然是不合理的。可以通过使用if __name__ == \"__main__\"将所有需要执行的代码放在该判断语句下面： g_num =100 def show(): print(&#39;我是show方法&#39;) class Student(object): def func(self): print(&#39;func&#39;) if __name__ == &quot;__main__&quot;: print(&quot;first_module&quot;) show() 修改保存后，再次在jupyter中导入模块，发现最后两句代码不会再运行了。（重新导入时，注意重启一下jupyter服务，清空之前的缓存） 5.5.3 __name__ __name__是python提供的一个全局变量 随便在jupyter的一个代码框中运行print(__name__)结果是__main__ 但是当我们在.py文件内部添加一行print(__name__)： g_num =100 def show(): print(&#39;我是show方法&#39;) class Student(object): def func(self): print(&#39;func&#39;) print(__name__) if __name__ == &quot;__main__&quot;: print(&quot;first_module&quot;) show() 然后在jupyter代码框中运行以下代码，观察输出： print(__name__) # __main__ import first_module # first_module 总结： 如果当前执行的程序是本文件时候，print(__name__)的结果是__main__ 如果当前文件被用作模块被其他文件导入了， print(__name__)的结果是自己的文件名。所以在first_module被导入到jupyter中时，__name__!=__main__，所以if判断语句下的代码不会被执行。 5.5.4 模块导入方式 # 起别名：使用起来更简洁 import first_module as fm fm.show() # from module_name import method,object from first_module import show,Student show() Student # import * (不建议使用) from first_module import * 不建议使用import *，因为如果有例外一个模块叫second_module他的里面可能有一些方法名与first_module中的方法一样，这样在调用方法的时候容易混淆。 5.5.5 拓展 1. 查看模块方法 # 方法一 import math dir(math) # 方法二 # 在终端运行Python，例如： time. + tab键 # 想要查看每个功能的解释，用help(type(对象名)) a = &#39;a&#39; help(type(a)) len() 2. 查看Python全部内置变量和内置函数 import builtins dir(builtins) 3. 查看所有安装的模块 help(&#39;modules&#39;) 5.6 常见模块 5.6.1 math import math r = math.floor(3.2) # 向下取整 print(r) r = math.ceil(4.5) # 向上取整 print(r) r = round(3.4999) # 四舍五入 print(r) r = math.pow(3,4) # =3**4 print(r) r = math.sqrt(25) # 开平方 print(r) r = math.fabs(-0.23) # 绝对值(小数) print(r) r = abs(-2) # 绝对值 print(r) 5.6.2 time import time # 1. 生成当前时间戳(返回从1970年1970年1月1日0点整到现在过了多少秒) # print(time.time()) # # 2.作用是格式化时间戳为本地的时间 struct_time = time.localtime(time.time()) print(struct_time) # # 获取对应的年与日时间等信息 print(struct_time.tm_hour) # # 格式化成2020-07-08 17:35:47形式 print(time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, struct_time)) tss1 = &#39;2020-07-08 23:40:01&#39; timeArray = time.strptime(tss1, &quot;%Y-%m-%d %H:%M:%S&quot;) print(&#39;将字符串的时间转成struct_time&#39;,timeArray) print(&#39;将struct_time转换为时间戳&#39;,time.mktime(timeArray)) "]
]
